# Interactive tools

## Character Generation Helpers

### Character Abilities

```{ojs}

import {generalDice, calculateModifier, rollAbilityScore} from "./custom.js"



viewof statrolls = Inputs.button(html`<button style="color: black; background-color: lightgray;">Roll Stats</button>`, {reduce: () => [rollAbilityScore(),rollAbilityScore(),rollAbilityScore(),rollAbilityScore(),rollAbilityScore(),rollAbilityScore()]}

)
```

| Ability      | Value           | Modifier                           |
|--------------|-----------------|------------------------------------|
| Strength     | ${statrolls[0]} | ${calculateModifier(statrolls[0])} |
| Intelligence | ${statrolls[1]} | ${calculateModifier(statrolls[1])} |
| Wisdom       | ${statrolls[2]} | ${calculateModifier(statrolls[2])} |
| Dexterity    | ${statrolls[3]} | ${calculateModifier(statrolls[3])} |
| Constitution | ${statrolls[4]} | ${calculateModifier(statrolls[4])} |
| Charisma     | ${statrolls[5]} | ${calculateModifier(statrolls[5])} |


### Starting Gold 

```{ojs}


viewof goldRoll = Inputs.button(html`<button style="color: black; background-color: lightgray;">Roll Gold (3d6 x 10)</button>`, {value: 0, reduce: () => {
  let temp = (10 * generalDice(3,6,0));
  set (viewof startingGold, temp);
  return temp}})
```

**Starting Gold**: ${goldRoll}

### Buy Equipment 

```{ojs}

import { convertToGold } from "./custom.js"

function set(input, value) {
  input.value = value;
  input.dispatchEvent(new Event("input", {bubbles: true}));
}

viewof startingGold = Inputs.text({label: "Starting Gold: "})

spent = {
  if (myarray.length != 0){
      let pricesGP = myarray.map(x => x[1].split(" ")).map(x => convertToGold(Number(x[0]), x[1]))
      let total = pricesGP.reduce ((x,y) => x + y)
      return total
  } else {return 0}
}

remainingGold = Number(startingGold) - spent
```

**Remaining Gold**: ${remainingGold.toFixed(1)} gp

Click to select. Use Ctrl (Cmd) or Shift to select multiple.

```{ojs}
data = {
  const d = await FileAttachment("equipment.json").json()
  return d
}

miscs =  data[0].map( x => [x["Item"], x["Price"]] )
weapons = data[1].map( x => [x["Weapon"], x["Price"]])
armor = data[2].map( x => [x["Armor Type"], x["Price"]])
animals = data[3].map( x => [x["Item"], x["Price"]])
allItems = miscs.concat(weapons.concat(armor.concat(animals)))
```


```{ojs}
viewof search  = {
  let n = Inputs.search(allItems);
return n
}
```

```{ojs}
viewof items = Inputs.select(search, {multiple: true
, format: (x) => `${x[0]},   (${x[1]})`
} )
miscPrice = items.map(x => x[1])

miscItems = items.map(x => x[0])

```


```{ojs}
mutable myarray = []


viewof b = Inputs.button(html`<button style="color: black; background-color: lightgray;">add selected</button>`, {
    reduce: () => mutable myarray = [...mutable myarray].concat(items) })
```

<br>

```{ojs}
viewof inventory = Inputs.select(myarray, {multiple:true
, format: (x) => `${x[0]},   (${x[1]})`
})

```


```{ojs}

viewof c = Inputs.button(html`<button style="color: black; background-color: lightgray;">remove selected</button>`, {
    reduce: () => mutable myarray = [...mutable myarray].filter(item => !inventory.includes(item)) })
```


